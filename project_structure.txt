# 완전한 프로젝트 구조 (NW 지침서 추가)

kisa-network-analyzer/
├── main.py                     # Flask 애플리케이션 메인 파일
├── config.py                   # 애플리케이션 설정
├── requirements.txt            # Python 의존성
├── setup.py                   # 패키지 설치 스크립트
├── Makefile                   # 프로젝트 관리 명령어
├── Dockerfile                 # Docker 이미지 설정
├── docker-compose.yml         # Docker Compose 설정
├── docker-compose.dev.yml     # 개발용 Docker Compose
├── .env.example              # 환경변수 예시
├── .gitignore                # Git 무시 파일
├── .dockerignore             # Docker 무시 파일
├── README.md                 # 프로젝트 문서
├── LICENSE                   # 라이선스
├── CHANGELOG.md              # 변경 이력
├── CONTRIBUTING.md           # 기여 가이드
├── MANIFEST.in               # 패키지 포함 파일
│
├── models/                   # 데이터 모델
│   ├── __init__.py
│   ├── analysis_request.py   # 분석 요청 모델
│   └── analysis_response.py  # 분석 응답 모델
│
├── rules/                    # 보안 룰셋 (다중 지침서 지원)
│   ├── __init__.py          # 호환성 유지 및 통합 interface
│   ├── loader.py            # 다중 지침서 로더 시스템
│   ├── rules_status.yaml    # 지침서별 룰 상태 관리
│   │
│   ├── kisa_rules.py        # KISA 가이드 룰셋 (38개 룰)
│   ├── checks_kisa.py       # KISA 논리적 검증 함수
│   │
│   ├── cis_rules.py         # CIS Controls 룰셋 (11개 룰)
│   ├── checks_cis.py        # CIS 논리적 검증 함수
│   │
│   ├── nw_rules.py          # NW 지침서 룰셋 (42개 룰) ⭐️ 새로 추가
│   └── checks_nw.py         # NW 논리적 검증 함수 ⭐️ 새로 추가
│
├── analyzers/               # 분석 엔진
│   ├── __init__.py
│   └── config_analyzer.py   # 다중 지침서 분석기
│
├── utils/                   # 유틸리티
│   ├── __init__.py
│   ├── validation.py        # 요청 검증
│   ├── logger.py           # 로깅 설정
│   └── preset_manager.py   # 사용자 프리셋 관리
│
├── tests/                   # 테스트
│   ├── __init__.py
│   ├── test_analyzer.py     # 분석기 테스트
│   ├── test_models.py       # 모델 테스트
│   └── test_api.py         # API 테스트
│
├── scripts/                 # 유틸리티 스크립트
│   ├── install.sh          # 설치 스크립트
│   ├── benchmark.py        # 성능 벤치마크
│   ├── rule_validator.py   # 룰셋 검증
│   ├── config_generator.py # 테스트 설정 생성
│   ├── docker-build.sh     # Docker 빌드
│   ├── docker-run.sh       # Docker 실행
│   └── docker-deploy.sh    # Docker 배포
│
├── examples/               # 예제 설정 파일
│   ├── README.md
│   ├── cisco_vulnerable.cfg
│   ├── cisco_secure.cfg
│   ├── juniper_vulnerable.conf
│   ├── juniper_secure.conf
│   ├── nw_vulnerable.cfg   # ⭐️ NW 지침서용 예제
│   └── nw_secure.cfg       # ⭐️ NW 지침서용 예제
│
├── logs/                   # 로그 파일 (생성됨)
│   └── .gitkeep
│
└── docs/                   # 문서 (향후 확장)
    ├── api.md              # API 명세서 ⭐️ 새로 추가
    └── frameworks.md       # 지침서별 상세 문서

# ================================
# 지원되는 보안 지침서 현황

## 구현 완료된 지침서

### 1. KISA (한국인터넷진흥원) ✅ 완전 구현
- 총 38개 룰
- 모든 룰에 논리적 검증 함수 적용
- 장비 타입: Cisco, Juniper, Radware, Passport, Piolink

### 2. CIS (Center for Internet Security) ✅ 부분 구현
- 총 11개 룰 (AAA 관련)
- Cisco IOS 12 Benchmark v4.0.0 기준
- 장비 타입: Cisco

### 3. NW (네트워크 보안 지침서) ✅ 완전 구현 ⭐️ 새로 추가
- 총 42개 룰
- 확장된 장비 지원 (HP, Dasan, Alcatel, Netgear 등)
- 물리적 보안 및 무선랜 보안 강화

## 계획된 지침서

### 4. NIST (National Institute of Standards) 🚧 계획 중
- NIST Cybersecurity Framework 2.0 기준
- 예상 룰 수: 50+ 개

# ================================
# 빠른 시작 가이드 (업데이트)

## 1. 설치 (변경 없음)
```bash
git clone https://github.com/your-org/kisa-network-analyzer.git
cd kisa-network-analyzer
chmod +x scripts/install.sh
./scripts/install.sh
```

## 2. 새로운 NW 지침서 사용

### NW 지침서로 분석
```bash
curl -X POST http://localhost:https://kisa-network-analyzer-production.up.railway.app/api/v1/config-analyze \
  -H "Content-Type: application/json" \
  -d '{
    "deviceType": "Cisco",
    "framework": "NW",
    "configText": "enable password cisco123\nsnmp-server community public RO",
    "options": {"checkAllRules": true}
  }'
```

### NW 지침서 룰 목록 조회
```bash
curl http://localhost:https://kisa-network-analyzer-production.up.railway.app/api/v1/frameworks/NW/rules
```

### NW 지침서 정보 조회
```bash
curl http://localhost:https://kisa-network-analyzer-production.up.railway.app/api/v1/frameworks
```

## 3. 지원되는 모든 지침서 현황

### 지침서별 룰 수
- **KISA**: 38개 룰 (완전 구현)
- **CIS**: 11개 룰 (부분 구현)
- **NW**: 42개 룰 (완전 구현) ⭐️ 새로 추가
- **NIST**: 0개 룰 (계획 중)

### 장비 지원 현황
```
Cisco     : KISA(38) + CIS(11) + NW(42) = 91개 룰
Juniper   : KISA(38) + NW(35) = 73개 룰
HP        : NW(30) = 30개 룰 ⭐️ 새로 추가
Piolink   : KISA(38) + NW(35) = 73개 룰
Radware   : KISA(25) + NW(20) = 45개 룰
Dasan     : NW(25) = 25개 룰 ⭐️ 새로 추가
Alcatel   : NW(28) = 28개 룰 ⭐️ 새로 추가
```

## 4. 새로운 API 기능

### 다중 지침서 비교 분석
```bash
curl -X POST http://localhost:https://kisa-network-analyzer-production.up.railway.app/api/v1/config-analyze \
  -H "Content-Type: application/json" \
  -d '{
    "deviceType": "Cisco",
    "framework": "KISA",
    "configText": "...",
    "options": {
      "compareWith": ["NW", "CIS"],
      "analysisMode": "comparison"
    }
  }'
```

### 프리셋을 이용한 분석
```bash
curl -X POST http://localhost:https://kisa-network-analyzer-production.up.railway.app/api/v1/analyze-with-preset \
  -H "Content-Type: application/json" \
  -d '{
    "presetId": "nw_comprehensive",
    "deviceType": "Cisco",
    "configText": "..."
  }'
```

# ================================
# NW 지침서 특징

## 확장된 보안 영역
1. **물리적 보안 강화**
   - 무선랜 통제대책 (NW-42)
   - 스위치/허브 보안 강화 (NW-38)
   - 불필요한 포트 차단 강화

2. **네트워크 장비 관리 강화**
   - 백업 관리 (NW-41)
   - 동적 라우팅 프로토콜 인증 (NW-40)
   - 환경설정 원격 로딩 차단 (NW-39)

3. **확장된 장비 지원**
   - HP, Dasan, Alcatel, Netgear 등
   - 무선 장비 전용 룰
   - 스위치 전용 보안 룰

## NW vs KISA vs CIS 비교

| 영역 | KISA | CIS | NW |
|------|------|-----|-----|
| 기본 보안 | ✅ | ✅ | ✅ |
| AAA 인증 | ⚠️ 기본 | ✅ 상세 | ✅ 강화 |
| 물리적 보안 | ⚠️ 기본 | ❌ | ✅ 강화 |
| 무선랜 보안 | ❌ | ❌ | ✅ 전용 |
| 백업 관리 | ❌ | ❌ | ✅ 전용 |
| 장비 지원 | 5개 | 1개 | 9개 |

# ================================
# 실행 확인 방법 (업데이트)

## 1. NW 지침서 동작 확인
```bash
# NW 지침서 정보 확인
curl http://localhost:https://kisa-network-analyzer-production.up.railway.app/api/v1/frameworks/NW/rules

# NW 지침서로 분석
curl -X POST http://localhost:https://kisa-network-analyzer-production.up.railway.app/api/v1/config-analyze \
  -H "Content-Type: application/json" \
  -d '{
    "deviceType": "HP",
    "framework": "NW",
    "configText": "username admin password admin123\nsnmp-server community public RW",
    "options": {"checkAllRules": true}
  }'
```

예상 응답:
```json
{
  "success": true,
  "framework": "NW",
  "deviceType": "HP",
  "issuesFound": 3,
  "results": [
    {
      "ruleId": "NW-01",
      "severity": "상",
      "description": "기본 패스워드 사용",
      "recommendation": "기본 패스워드를 강력한 패스워드로 변경"
    },
    {
      "ruleId": "NW-17",
      "severity": "중",
      "description": "SNMP 기본 커뮤니티 스트링 사용",
      "recommendation": "복잡한 커뮤니티 스트링 설정"
    },
    {
      "ruleId": "NW-19",
      "severity": "중",
      "description": "SNMP RW 권한 사용",
      "recommendation": "RO 권한으로 변경"
    }
  ]
}
```

## 2. 다중 지침서 지원 확인
```bash
curl http://localhost:https://kisa-network-analyzer-production.up.railway.app/api/v1/frameworks
```

예상 응답:
```json
{
  "success": true,
  "totalFrameworks": 4,
  "implementedFrameworks": 3,
  "frameworks": [
    {
      "id": "KISA",
      "name": "KISA 네트워크 장비 보안 가이드",
      "total_rules": 38,
      "isImplemented": true
    },
    {
      "id": "CIS",
      "name": "CIS Controls",
      "total_rules": 11,
      "isImplemented": true
    },
    {
      "id": "NW",
      "name": "NW 네트워크 보안 지침서",
      "total_rules": 42,
      "isImplemented": true
    },
    {
      "id": "NIST",
      "name": "NIST Cybersecurity Framework",
      "total_rules": 0,
      "isImplemented": false
    }
  ]
}
```

# ================================
# 업데이트 내용 요약

## 새로 추가된 파일
- `rules/nw_rules.py`: NW 지침서 룰셋 정의 (42개 룰)
- `rules/checks_nw.py`: NW 논리적 검증 함수
- `rules/rules_status.yaml`: 지침서별 룰 상태 관리
- `docs/api.md`: API 명세서
- `examples/nw_vulnerable.cfg`: NW 지침서용 취약한 설정 예제
- `examples/nw_secure.cfg`: NW 지침서용 안전한 설정 예제

## 기능 향상
- 총 3개 지침서 지원 (KISA, CIS, NW)
- 총 91개 룰 지원 (KISA: 38 + CIS: 11 + NW: 42)
- 9개 장비 타입 지원 (기존 5개 + 새로 추가 4개)
- 물리적 보안 및 무선랜 보안 강화
- 확장된 네트워크 장비 관리 기능

## 호환성
- 기존 API 완전 호환 유지
- KISA 지침서 기본값 유지
- 점진적 마이그레이션 지원

프로젝트가 NW 지침서 추가로 더욱 강화되었습니다! 🚀